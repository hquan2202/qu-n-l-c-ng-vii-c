import { Component, OnInit, HostListener, ElementRef } from '@angular/core'; // üî• TH√äM HostListener, ElementRef
import { MatIconModule } from '@angular/material/icon';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { LoginComponent } from '../../pages/login/login';
import { FilterComponent } from '../filter/filter';
import { UiFilterService } from '../../services/ui-filter/ui-filter.service';
import { AsyncPipe, NgIf } from '@angular/common';
import { Observable } from 'rxjs';
import {ViewPopupComponent} from '../view-popup/view-popup'; // ƒë∆∞·ªùng d·∫´n t√πy b·∫°n
import { CommonModule } from '@angular/common';


@Component({
  selector: 'app-navbar',
  standalone: true,
<<<<<<< HEAD
  imports: [MatIconModule, MatDialogModule, FilterComponent, NgIf, AsyncPipe],
  templateUrl:'./navbar.html',
=======
  imports: [  CommonModule,
                    MatIconModule,
                    MatDialogModule,
                    ViewPopupComponent],
  templateUrl: './navbar.html',
>>>>>>> upstream/master
  styleUrls: ['./navbar.css']
})
export class NavBarComponent implements OnInit {
  isSidebarOpen = false;
  isGridView = true;
  isDarkBackground = false;
  isViewOpen = false; // üîπ th√™m d√≤ng n√†y

  isDropdownOpen: boolean = false;
  currentFilterStatus$: Observable<string | null>;

  // üî• Inject ElementRef, MatDialog V√Ä UiFilterService
  constructor(
    private dialog: MatDialog,
    private uiFilterService: UiFilterService,
    private el: ElementRef // Inject ElementRef ƒë·ªÉ truy c·∫≠p DOM
  ) {
    this.currentFilterStatus$ = this.uiFilterService.currentFilterStatus$;
  }

  ngOnInit(): void {}

  /**
   * üî• LOGIC CLICK OUT: X·ª≠ l√Ω s·ª± ki·ªán click chu·ªôt tr√™n to√†n b·ªô document.
   * N·∫øu click x·∫£y ra b√™n ngo√†i filter-wrapper V√Ä dropdown ƒëang m·ªü, ƒë√≥ng dropdown.
   */
  @HostListener('document:click', ['$event'])
  clickout(event: Event) {
    // 1. Ch·ªâ th·ª±c hi·ªán n·∫øu dropdown ƒëang m·ªü
    if (!this.isDropdownOpen) return;

    // 2. T√¨m ph·∫ßn t·ª≠ ch·ª©a filter (filter-wrapper) b√™n trong component n√†y
    const filterWrapper = this.el.nativeElement.querySelector('.filter-wrapper');

    // 3. Ki·ªÉm tra xem s·ª± ki·ªán click c√≥ n·∫±m trong filterWrapper kh√¥ng
    // N·∫øu click n·∫±m NGO√ÄI v√πng filterWrapper, ƒë√≥ng dropdown.
    if (filterWrapper && !filterWrapper.contains(event.target)) {
      this.isDropdownOpen = false;
    }
  }

  // Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i m·ªü/ƒë√≥ng dropdown
  toggleDropdown(): void {
    this.isDropdownOpen = !this.isDropdownOpen;
  }

  // ƒê√≥ng dropdown (d√πng khi FilterComponent ph√°t s·ª± ki·ªán ch·ªçn xong)
  closeDropdown(): void {
    this.isDropdownOpen = false;
  }

  toggleSidebar(): void {
    this.isSidebarOpen = !this.isSidebarOpen;
    console.log('Sidebar toggled:', this.isSidebarOpen);
  }

  toggleView(): void {
    this.isViewOpen = !this.isViewOpen; // üîπ b·∫≠t/t·∫Øt popup
    console.log('View mode toggled:', this.isGridView ? 'Grid' : 'List');
  }


  toggleBackground(): void {
    this.isDarkBackground = !this.isDarkBackground;
    console.log('Background toggled:', this.isDarkBackground ? 'Dark' : 'Light');
  }

  openLoginPopup(): void {
    this.dialog.open(LoginComponent, {
      width: '400px',
      panelClass: 'custom-dialog',
    });
  }
}
